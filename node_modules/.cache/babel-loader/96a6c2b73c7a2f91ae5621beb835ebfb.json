{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\"; // SOUNDS --------------------------------------------------->\n\nimport { sLinnDrum } from \"../samples/linnDrum/index\"; // REDUX ---------------------------------------------------->\n\nimport { soundActions } from \"../store/sounds\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nfunction useLogic() {\n  _s();\n\n  const dispatch = useDispatch(); // REDUX VARIABLES ---------------------------------------->\n\n  const soundArray = sLinnDrum;\n  const tempoValue = useSelector(state => state.sound.tempo);\n  const bars = useSelector(state => state.sound.bars);\n  const sequence = useSelector(state => state.sound.sequence);\n  useEffect(() => {\n    dispatch(soundActions.loadSequence(soundArray));\n  }, []); // HOOK VARIABLES ----------------------------------------->\n\n  const [isPlaying, setIsPlaying] = useState(false);\n  let [rowId, setRowId] = useState(0);\n  let [impulse, setImpulse] = useState(0); // METHODS ------------------------------------------------>\n\n  const updateSound = (soundId, sequenceId) => {\n    dispatch(soundActions.updateSound({\n      id: sequenceId,\n      soundId: soundId,\n      array: soundArray[sequenceId]\n    }));\n  };\n\n  const removeSound = sequenceId => {\n    dispatch(soundActions.removeSound(sequenceId));\n  };\n\n  const play = () => {\n    setIsPlaying(!isPlaying);\n  };\n\n  const stop = () => {\n    setIsPlaying(false);\n    setRowId(rowId = 0);\n    setImpulse(0);\n  };\n\n  const reset = () => {\n    dispatch(soundActions.resetSound(soundArray));\n    stop();\n  };\n\n  const playAudio = () => {\n    if (rowId === bars) {\n      setRowId(rowId = 0);\n    }\n\n    setImpulse(impulse += 1);\n\n    if (impulse % 6 === 0) {\n      sequence.forEach(element => {\n        if (element.sounds[rowId].on === true) {\n          new Audio(element.soundFile).play();\n        }\n      });\n      setRowId(rowId++);\n    }\n  };\n\n  useEffect(() => {\n    let interval;\n\n    if (isPlaying) {\n      let value = 60000 / tempoValue / 24;\n      interval = setInterval(() => {\n        playAudio();\n      }, value);\n    }\n\n    return () => {\n      clearInterval(interval);\n    };\n  }, [isPlaying, tempoValue, sequence]);\n  return {\n    bars,\n    isPlaying,\n    tempoValue,\n    rowId,\n    impulse,\n    sequence,\n    play,\n    stop,\n    reset,\n    playAudio,\n    updateSound,\n    removeSound\n  };\n}\n\n_s(useLogic, \"DQbVMVp5CxGrud4kL/jUGNJ2R28=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector];\n});\n\nexport default useLogic;","map":{"version":3,"names":["useEffect","useState","sLinnDrum","soundActions","useSelector","useDispatch","useLogic","dispatch","soundArray","tempoValue","state","sound","tempo","bars","sequence","loadSequence","isPlaying","setIsPlaying","rowId","setRowId","impulse","setImpulse","updateSound","soundId","sequenceId","id","array","removeSound","play","stop","reset","resetSound","playAudio","forEach","element","sounds","on","Audio","soundFile","interval","value","setInterval","clearInterval"],"sources":["/Users/wojciechbudziak/Desktop/drum-machine/src/hooks/use-logic.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\n\n// SOUNDS --------------------------------------------------->\n\nimport { sLinnDrum } from \"../samples/linnDrum/index\";\n\n// REDUX ---------------------------------------------------->\n\nimport { soundActions } from \"../store/sounds\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nfunction useLogic() {\n  const dispatch = useDispatch();\n\n  // REDUX VARIABLES ---------------------------------------->\n\n  const soundArray = sLinnDrum;\n\n  const tempoValue = useSelector((state) => state.sound.tempo);\n\n  const bars = useSelector((state) => state.sound.bars);\n\n  const sequence = useSelector((state) => state.sound.sequence);\n\n  useEffect(() => {\n    dispatch(soundActions.loadSequence(soundArray));\n  }, []);\n\n  // HOOK VARIABLES ----------------------------------------->\n\n  const [isPlaying, setIsPlaying] = useState(false);\n  let [rowId, setRowId] = useState(0);\n  let [impulse, setImpulse] = useState(0);\n\n  // METHODS ------------------------------------------------>\n\n  const updateSound = (soundId, sequenceId) => {\n    dispatch(\n      soundActions.updateSound({\n        id: sequenceId,\n        soundId: soundId,\n        array: soundArray[sequenceId],\n      })\n    );\n  };\n\n  const removeSound = (sequenceId) => {\n    dispatch(soundActions.removeSound(sequenceId));\n  };\n\n  const play = () => {\n    setIsPlaying(!isPlaying);\n  };\n\n  const stop = () => {\n    setIsPlaying(false);\n    setRowId((rowId = 0));\n    setImpulse(0);\n  };\n\n  const reset = () => {\n    dispatch(soundActions.resetSound(soundArray));\n    stop();\n  };\n\n  const playAudio = () => {\n    if (rowId === bars) {\n      setRowId((rowId = 0));\n    }\n\n    setImpulse((impulse += 1));\n\n    if (impulse % 6 === 0) {\n      sequence.forEach((element) => {\n        if (element.sounds[rowId].on === true) {\n          new Audio(element.soundFile).play();\n        }\n      });\n\n      setRowId(rowId++);\n    }\n  };\n\n  useEffect(() => {\n    let interval;\n\n    if (isPlaying) {\n      let value = 60000 / tempoValue / 24;\n\n      interval = setInterval(() => {\n        playAudio();\n      }, value);\n    }\n\n    return () => {\n      clearInterval(interval);\n    };\n  }, [isPlaying, tempoValue, sequence]);\n\n  return {\n    bars,\n    isPlaying,\n    tempoValue,\n    rowId,\n    impulse,\n    sequence,\n    play,\n    stop,\n    reset,\n    playAudio,\n    updateSound,\n    removeSound,\n  };\n}\n\nexport default useLogic;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}